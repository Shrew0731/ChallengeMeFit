:root {
  --primary-color: #191970; /*MidnightBlue*/
  --secondary-color: #C0C0C0; /*Silver*/
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}


html, body {
  height: 100%;
}

body {
  font-family: 'Roboto', sans-serif;
  display: flex;
  flex-direction: column;
}

.content {
  flex: 1 0 auto;
}

.container {
  width: 90%;
  margin: 0 auto; /*0 top & bottom, auto left & right*/
  padding: 10px;
  overflow: none;
}

.app-header {
  background-color: var(--primary-color); /* var(name of variable)*/
  box-shadow: 3px 3px 10px #696969; /*Shadow color=DarkGrey*/
  align-items: center;
  justify-content: center;
  padding: 25px 15px;
  min-height: 250px;
  margin-left: auto;
  margin-right: auto;
}

/*addde the display: flex here instead of in the .app-header because only want the logo and search bar to align*/
.app-header .container {
  display: flex; /*by defult this aligns the elements in the container horizontally*/
  flex-direction: column; /*only needed if you want elements to align vertically*/
  align-items: center;
  justify-content: center;
  padding: 25px 15px;
}

.app-header .logo {
  width: 250px;
  margin-bottom: 16px;
}

.app-header input[type="text"] {
  padding-left: 7px;
  width: 450px;
  border: 0;
  border-radius: 3px;
}

.subheader {
  background-color: var(--secondary-color);
  color: #FFFFFF; /*color=White*/
  box-shadow: 3px 3px 10px #696969; /*Shadow color=DimGrey*/
  margin: 0 auto 16px auto; /*0 =top, auto=right, 16=bottom, auto=left*/
  width: 90%; /*this makes the subheader slightly thinner than the header*/
  font-size: 28px; /*default is 16px*/
  padding: 25px;
  display: flex; /*subheader has 2 flex items, the div(with the text) and the image. By using flex, it aligns the items side by side*/
  align-items: center;
  justify-content: space-between; /*this allows you to take any remaining space and do what you want with it, in this case we are putting the space between the 2 items. Must use flex in order to use this element*/
}

.subheader p {
  margin: 4px;
}

.subheader img {
  width: 60px;
}

/*ParentGrid property*/
/*  grid-template-columns: repeat(2, 1fr);*/
/*this along with the display.grid, gives you the 2 columns*/
.grid {
  display: grid;
  grid-template-rows: auto;
  grid-gap: 20px;
}

/*use display flex in order to easily allgin items in the same area*/
.grid .item {
  box-sizing: border-box;
  border-top: 1px #A9A9A9 solid;
  border-right: 2px #A9A9A9 solid;
  border-bottom: 2px #A9A9A9 solid;
  border-left: 1px #A9A9A9 solid;
  /*border: 1px #A9A9A9 solid; /*border: width color style*/ /*color=DarkGrey*/
  padding: 10px; /*this creates space between the border and the elements inside*/
  box-shadow: 1px 1px 2px #696969;
}

.grid .item h4{
  margin-bottom: 10px;
}

.grid .item p {
  display: block;
  font-size: 14px;
  color: var(--primary-color);
  font-weight: bold;
  margin-bottom: 20px;
}

/*no images for this yet. this is for the 4 boxes. align.self: will not work until display: flex is put in the .grid .item*/
.grid .item img {
  width: 30px;
  align-self: flex-end; /*this is aligning the icon images to the bottom right. We used align.self here because in the parent grid item above we put the display.text*/
}

/*this is a sticky footer, meaning it will stay at the bottom of the page*/
.app-footer {
  flex-shrink: 0; /*this works with the html, body height 100% and then .content flex 1 0 auto to make the footer a sticky footer*/
  background: var(--secondary-color);
  color: #FFFFFF;
  padding: 30px;
  font-size: 20px;
  margin-top: 30px;
}

.app-footer ul {
  display: flex;
  align-items: center;
  justify-content: space-around; /*this is taking the extra space in the footer and distributing it evenly on the sides and between each item*/
  list-style: none;
}

.app-footer ul li {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/*this is targeting the icon images for each list item*/
.app-footer ul li i {
  font-size: 34px;
}

/* Splash screen */
#splash {
  position: absolute; /*this is so you can maniuplate the screen with the next 4 elements*/
  top: 0; /*makes it start at the top corner*/
  left: 0; /*makes it start at the top-left corner*/
  width: 100%; /*makes it go from one side of the screen to the other*/
  height: 100vh; /*this makes it take up the whole page*/
  background-color: var(--primary-color);
  z-index: 2; /*this makes it so the image always stays ontop*/
  display: flex;
  flex-direction: column;
  align-items: center; /*this aligns the item horizontally*/
  justify-content: center; /*this aligns the item vertically*/
  transition: opacity 1s; /*this works with the splash.fade below and JavaScript to make the image fade out after 1 second*/
}

#splash img {
  width: 550px;
  height: 250px;
}

/*in orde for this to work, have to use JavaScript which we put in the index.html file*/
/* since fade is actually attached to splash, there should be no space betwee #splash and .fade*/
/*a space is styling a fade class inside of splash*/
#splash.fade {
  opacity: 0;
}


/*if the screen is 768 or larger then the following will apply*/
/*created the mobile version first and now the following is being added to set the display for users when on a webpage and not a phone*/
@media(min-width: 768px) {
  .grid {
    grid-template: fit-content(30%) /*repeat(2, 1fr); - old code*/
  }

  .grid .item img {
    width: 60px;
  }
}
